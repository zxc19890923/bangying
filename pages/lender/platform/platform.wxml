<view class="platformContainer">
  <view class="platformTop">
    <view class="platformHeader">分流平台</view>
    <view class="platformTitle">一、服务条款确认以及接受</view>
    <view class="platformDec">
      这些年来，ES6 将 JS 的可用性提升到一个新的水平时: 箭头函数、类等等,这些都很棒。
      箭头函数是最有价值的新功能之一，有很多好文章描述了它的上下文透明性和简短的语法。
      但每个事务都有两面。通常，新特性会带来一些混乱，其中之一就是箭头函数被误导了。本文将介绍一些场景，在这些场景中，你应该绕过箭头函数，转而使用良好的旧函数表达式或较新的简写语法。并且要注意缩短代码，因为这会影响代码的可读性。
    </view>
    <view class="platformTitle">二、服务条款确认以及接受</view>
    <view class="platformDec">
      这些年来，ES6 将 JS 的可用性提升到一个新的水平时: 箭头函数、类等等,这些都很棒。
      箭头函数是最有价值的新功能之一，有很多好文章描述了它的上下文透明性和简短的语法。
      但每个事务都有两面。通常，新特性会带来一些混乱，其中之一就是箭头函数被误导了。本文将介绍一些场景，在这些场景中，你应该绕过箭头函数，转而使用良好的旧函数表达式或较新的简写语法。并且要注意缩短代码，因为这会影响代码的可读性。
      this 在JS中是一个强大的特性，它允许根据调用函数的方式更改上下文。通常，上下文是调用发生的目标对象，这使得代码更加自然，就像这个对象发生了什么。
      但是，箭头函数会在声明上静态绑定上下文，并且无法使其动态化，但这种方式有坏也有好，有时候我们需要动态绑定。
    </view>
  </view>
  <view class="platformButton">
    <view class="platformText">注册 / 登录即表示同意<text class="platformTextPri">《用户协议》</text></view>
    <button type="primary" style="width: calc(100%);" bindtap="goBackListPage">同意</button>
  </view>
</view>